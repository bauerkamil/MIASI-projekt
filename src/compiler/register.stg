group pierwszy;

deflt(elem) ::= <<
    <elem; separator="\n">
>>

int(i) ::= <<
MOV A,#<i>
>>

twoop(p1, p2) ::= <<
<p2>
PUSH A
<p1>
POP B
>>

add(p1,p2) ::= <<
<twoop(p1,p2)>
ADD A,B
>>

sub(p1,p2) ::= <<
<twoop(p1,p2)>
SUB A,B
>>

mul(p1,p2) ::= <<
<twoop(p1,p2)>
MUL A,B
>>

div(p1,p2) ::= <<
<twoop(p1,p2)>
DIV A,B
>>

assign(id)::= <<
MOV [<id>], A
>>

get(id)::= <<
MOV A, [<id>]
>>

if_(cond, then_, else_)::= <<
   JE <cond>
   <then_; separator="\n">
   JMP	label_endif_xx
   <else_; separator="\n">
   label_endif_xx:
>>


fun(fun_name)::= <<
    CALL <fun_name>
>>

def(def_name, body)::= <<
     <def_name>:
        <body; separator="\n">
 >>

dek(n) ::= <<
DD <n>
>>
